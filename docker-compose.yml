version: "3.8"

services:
  #  server:
  #    build:
  #      context: .
  #      dockerfile: Dockerfile
  #    ports:
  #      - "3000:3000"
  #    # expose: ["3000"]
  #    volumes:
  #      - .:/usr/src/app
  #      - registry:/root/.cargo/registry
  #    depends_on:
  #      # - redis
  #      - nats
  #       - postgres
  #    # links:
  #    #   - postgres
  #    env_file: .env
  #    command: bash -c "bash cargo-watch -x run"

  nats:
    image: nats:latest
    # entrypoint: "/gnatsd -DV"

    restart: unless-stopped
    ports:
      - "8222:8222"
      - "4222:4222"
      - "6222:6222"
  #       hostname: nats
  #       networks:
  #           - nats

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - .docker/redis:/data
    restart: unless-stopped
    deploy:
      replicas: 1
    # configs:
    #   - my_config
    #   - my_other_config

  postgres:
    container_name: postgres
    image: postgres:13.4-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PGDATA=/data/postgres
    volumes:
      - .docker/postgres:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - .docker/pgadmin:/root/.pgadmin
    ports:
      - "15432:80"
    depends_on:
      - postgres
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"

  minio:
    image: minio/minio
    restart: always
    volumes:
      - .docker/minio:/minio/storage
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: "minio"
      MINIO_ROOT_PASSWORD: "1234@123"
    command: server /minio/storage --console-address :9001

  minio-bucket:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add minio-host http://minio:9000 minio 1234@123;
      /usr/bin/mc mb minio-host/file-storage;
      /usr/bin/mc policy download minio-host/file-storage;
      exit 0;
      "

# configs:
#   my_config:
#     file: ./my_config.txt
#   my_other_config:
#     external: true

# networks:
#   default:
#     driver: bridge

# cargo will try to redownload packages @ docker-compose up so store them here.
volumes:
  # mongodb:
  registry:
    driver: local